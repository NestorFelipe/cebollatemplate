<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="al_registar" xml:space="preserve">
    <value>{0} al registar {1}</value>
  </data>
  <data name="AuthStateNoSetPersist" xml:space="preserve">
    <value>No se establecio el estado de autenticacion en {0}().</value>
  </data>
  <data name="ErrorEntity" xml:space="preserve">
    <value>Error al obtener el registro</value>
  </data>
  <data name="ErrorLogin" xml:space="preserve">
    <value>Usuario o Password incorrectos o el usuario no se encuentra registrado</value>
  </data>
  <data name="ErrorOperation" xml:space="preserve">
    <value>Error al ejecutar la operacion</value>
  </data>
  <data name="ErrorQuery" xml:space="preserve">
    <value>Error al obtener la lista solicitada</value>
  </data>
  <data name="NoDataEntity" xml:space="preserve">
    <value>No se encontrol el registro solicitado</value>
  </data>
  <data name="NoDataQuery" xml:space="preserve">
    <value>No se encontraron registros con la consulta solicitada</value>
  </data>
  <data name="ResultAccionNull" xml:space="preserve">
    <value>Debe defenir una definicion de validacion (Objeto o JwtToken o ObjetoLista)</value>
  </data>
  <data name="ResultAccionValida" xml:space="preserve">
    <value>el parametro de validacion ({0}) ya se inicializo, no puede tener dos objetos de validacion</value>
  </data>
  <data name="SuccessEntity" xml:space="preserve">
    <value>Se obtuvo el registro correctamente</value>
  </data>
  <data name="SuccessLogin" xml:space="preserve">
    <value>Autenticacion de usuario correcta</value>
  </data>
  <data name="SuccessOperation" xml:space="preserve">
    <value>Operacion completada correctamente</value>
  </data>
  <data name="SuccessQuery" xml:space="preserve">
    <value>Listado obtenido correctamente</value>
  </data>
  <data name="nullorempty" xml:space="preserve">
    <value>El campo {0} es un requisito obligatorio</value>
  </data>
  <data name="maxlenght" xml:space="preserve">
    <value>El campo no puede tener mas de {0} caracteres</value>
  </data>
  <data name="mail" xml:space="preserve">
    <value>Debe ingresar una dirección de correo electrónico válida.</value>
  </data>
  <data name="url" xml:space="preserve">
    <value>Debe ingresar una URL válida.</value>
  </data>
  <data name="fechamayor" xml:space="preserve">
    <value>La fecha debe ser mayor a la fecha actual</value>
  </data>
</root>